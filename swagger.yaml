---
swagger: "2.0"

info:
  description: The brains and business logic of Convo
  title: Convo API
  version: 1.0.0

host: api.hiconvo.com
schemes:
- http
consumes:
- application/json
produces:
- application/json

securityDefinitions:
  token:
    type: apiKey
    in: header
    name: authorization

paths:

  ###
  # Users
  ###

  /users:
    post:
      description: Create user
      parameters:
        - in: body
          name: user
          schema:
            type: object
            required:
              - email
              - firstName
              - password
            properties:
              email:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              password:
                type: string
      responses:
        201:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"

    get:
      description: Get user
      security:
        - token: []
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

    patch:
      summary: Update user
      description: |
        Changing one's email address causes a verification email to be sent. 
        Passing `true` to the password field causes a password reset email to 
        be sent. The other fields work normally.
      security:
        - token: []
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              email:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              password:
                type: boolean
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /users/auth:
    post:
      summary: Authenticate
      description: Authenticate with an email address and password
      parameters:
        - in: body
          name: auth
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        401:
          description: Permission denied 
          schema:
            $ref: "#/definitions/error"

  /users/oauth:
    post:
      summary: OAuth
      description: Create or retrieve a user via oauth
      parameters:
        - in: body
          name: oauth
          schema:
            type: object
            required:
              - email
              - provider
              - token
            properties:
              email:
                type: string
              provider:
                type: string
              token:
                type: string
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Validation error 
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /users/resend:
    post:
      summary: Resend verify email
      description: Resend verify email
      security:
        - token: []
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /users/password:
    post:
      summary: Reset password
      description: |
        This request is secured with a signature, so token based auth is not 
        required.
      parameters:
        - in: body
          name: reset
          schema:
            type: object
            required:
              - signature
              - timestamp
              - userID
              - password
            properties:
              signature:
                type: string
              timestamp:
                type: string
              userID:
                type: string
              password:
                type: string
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /users/verify:
    post:
      summary: Verify email
      description: |
        This request is secured with a signature, so token based auth is not 
        required.
      parameters:
        - in: body
          name: verify
          schema:
            type: object
            required:
              - signature
              - timestamp
              - userID
            properties:
              signature:
                type: string
              timestamp:
                type: string
              userID:
                type: string
      responses:
        200:
          description: User
          schema:
            $ref: "#/definitions/user"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  ###
  # Threads
  ###

  /threads:
    post:
      summary: Create thread
      description: |
        By default, the current user is the owner of the newly 
        created thread.
      security:
        - token: []
      parameters:
        - in: body
          name: thread
          schema:
            type: object
            required:
              - users
            properties:
              subject:
                type: string
              users:
                type: array
                items:
                  $ref: "#/definitions/userpartial"
      responses:
        201:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

    get:
      summary: Get threads
      description: Gets the threads of the current user.
      security:
        - token: []
      responses:
        200:
          description: Thread list
          schema:
            type: object
            required:
              - threads
            properties:
              threads:
                type: array
                items:
                  $ref: "#/definitions/thread"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /threads/{id}:
    get:
      summary: Get thread
      description: Gets the indicated thread.
      security:
        - token: []
      responses:
        200:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    patch:
      summary: Update thread
      description: Updates the indicated thread. Only the owner of the thread can change the subject.
      security:
        - token: []
      parameters:
        - in: body
          name: thread
          schema:
            type: object
            properties:
              subject:
                type: string
      responses:
        200:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    delete:
      summary: Delete thread
      description: Deletes the indicated thread. Only the owner of the thread can delete it.
      security:
        - token: []
      responses:
        200:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /threads/{threadID}/users/{userID}:
    post:
      summary: Add user to thread
      description: Adds a user to the thread.
      security:
        - token: []
      responses:
        200:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    delete:
      summary: Remove user from thread
      description: Removes a user from the thread.
      security:
        - token: []
      responses:
        200:
          description: Thread
          schema:
            $ref: "#/definitions/thread"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /threads/{threadID}/messages:
    get:
      summary: Get thread messages
      description: Get messages
      security:
        - token: []
      responses:
        200:
          description: Message list
          schema:
            type: object
            required:
              - messages
            properties:
              messages:
                type: array
                items:
                  $ref: "#/definitions/message"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    post:
      summary: Create thread message
      description: Create and send a message
      security:
        - token: []
      parameters:
        - in: body
          name: message
          schema:
            type: object
            properties:
              body:
                type: string
      responses:
        200:
          description: Message
          schema:
            $ref: "#/definitions/message"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /contacts:
    get:
      summary: Get contacts
      description: Get the current user's contacts
      security:
        - token: []
      responses:
        200:
          description: Contact list
          schema:
            type: object
            required:
              - contacts
            properties:
              contacts:
                type: array
                items:
                  $ref: "#/definitions/userpartial"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /contacts/{userID}:
    post:
      summary: Create contact
      description: Add a user to the current user's contacts
      security:
        - token: []
      responses:
        201:
          description: Contact
          schema:
            $ref: "#/definitions/userpartial"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"
    delete:
      summary: Delete contact
      description: Remove a user from the current user's contacts
      security:
        - token: []
      responses:
        200:
          description: Contact
          schema:
            $ref: "#/definitions/userpartial"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /events:
    post:
      summary: Create event
      description: |
        By default, the current user is the owner of the newly 
        created event.
      security:
        - token: []
      parameters:
        - in: body
          name: event
          schema:
            type: object
            required:
              - time
              - location
              - invitees
              - name
              - description
            properties:
              time:
                type: int
              location:
                type: string
              invitees:
                type: array
                items:
                  $ref: "#/definitions/userpartial"
              name:
                type: string
              description:
                type: string
      responses:
        201:
          description: Event
          schema:
            $ref: "#/definitions/event"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
    get:
      summary: Get events
      description: Get the current user's events
      security:
        - token: []
      responses:
        200:
          description: Event list
          schema:
            type: object
            required:
              - events
            properties:
              events:
                type: array
                items:
                  $ref: "#/definitions/event"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"

  /events/{id}:
    get:
      summary: Get event
      description: Gets the indicated event.
      security:
        - token: []
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    patch:
      summary: Update event
      description: Updates the indicated event. Only the owner of the event can change it.
      security:
        - token: []
      parameters:
        - in: body
          name: thread
          schema:
            type: object
            properties:
              time:
                type: int
              location:
                type: string
              name:
                type: string
              description:
                type: string
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    delete:
      summary: Delete event
      description: Deletes the indicated event. Only the owner of the event can delete it.
      security:
        - token: []
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /events/{eventID}/rsvp:
    post:
      summary: RSVP to event
      description: Marks a user as going or not going to an event. The request can be secured with either a signature or a user token.
      security:
        - token: []
      parameters:
        - in: body
          name: thread
          schema:
            type: object
            properties:
              going:
                type: boolean
                required: true
              signature:
                type: string
              timestamp:
                type: string
              userID:
                type: string
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /events/{eventID}/users/{userID}:
    post:
      summary: Add user to event
      description: Adds a user to the event.
      security:
        - token: []
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    delete:
      summary: Remove user from event
      description: Removes a user from the event.
      security:
        - token: []
      responses:
        200:
          description: Event
          schema:
            $ref: "#/definitions/event"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

  /events/{eventID}/messages:
    get:
      summary: Get event messages
      description: Get messages
      security:
        - token: []
      responses:
        200:
          description: Message list
          schema:
            type: object
            required:
              - messages
            properties:
              messages:
                type: array
                items:
                  $ref: "#/definitions/message"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

    post:
      summary: Create event message
      description: Create and send a message
      security:
        - token: []
      parameters:
        - in: body
          name: message
          schema:
            type: object
            properties:
              body:
                type: string
      responses:
        200:
          description: Message
          schema:
            $ref: "#/definitions/message"
        400:
          description: Validation error
          schema:
            $ref: "#/definitions/error"
        401:
          description: Permission denied
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found 
          schema:
            $ref: "#/definitions/error"

definitions:

  user:
    type: object
    required:
      - id
      - email
      - firstName
      - fullName
      - verified
      - token
    properties:
      id:
        type: string
        readOnly: true
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      fullName:
        type: string
        readOnly: true
      verified:
        type: boolean
      token:
        type: string
        readOnly: true

  userpartial:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        readOnly: true
      firstName:
        type: string
        readOnly: true
      lastName:
        type: string
        readOnly: true
      fullName:
        type: string
        readOnly: true
      avatar:
        type: string
        readOnly: true

  thread:
    type: object
    required:
      - id
      - users
      - owner
      - subject
    properties:
      id:
        type: string
        readOnly: true
      owner:
        $ref: "#/definitions/userpartial"
        readOnly: true
      users:
        type: array
        items:
          $ref: "#/definitions/userpartial"
      subject:
        type: string

  message:
    type: object
    required:
      - id
      - parentId
      - user
      - body
      - created_at
    properties:
      id:
        type: string
        readOnly: true
      parentID:
        type: string
        readOnly: true
      user:
        $ref: "#/definitions/userpartial"
        readOnly: true
      body:
        type: string
        readOnly: true
      created_at:
        type: string
        readOnly: true
  
  event:
    type: object
    required:
      - id
      - owner
      - created_at
      - time
      - location
      - invitees
      - name
      - description
    properties:
      id:
        type: string
        readOnly: true
      owner:
        $ref: "#/definitions/userpartial"
        readOnly: true
      created_at:
        type: string
        readOnly: true
      time:
        type: int
        readOnly: false
      location:
        type: string
        readOnly: false
      invitees:
        type: array
        items:
          $ref: "#/definitions/userpartial"
        readOnly: false
      rsvps:
        type: array
        items:
          type: string
      name:
        type: string
        readOnly: false
      description:
        type: string
        readOnly: false
 
  error:
    type: object
    description: Object with either a general error under the key message or field specific errors under keys matching the field name. The errors themselves are always strings.
    properties:
      message:
        type: string
